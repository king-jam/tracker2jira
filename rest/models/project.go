// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Project project
// swagger:model Project
type Project struct {

	// admin user ID
	AdminUserID string `json:"adminUserID,omitempty"`

	// external ID
	ExternalID string `json:"externalID,omitempty"`

	// project ID
	// Read Only: true
	ProjectID strfmt.UUID4 `json:"projectID,omitempty"`

	// project overrides
	ProjectOverrides interface{} `json:"projectOverrides,omitempty"`

	// project type
	ProjectType string `json:"projectType,omitempty"`

	// project URL
	ProjectURL string `json:"projectURL,omitempty"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProjectType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectID", "body", "uuid4", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

var projectTypeProjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tracker","jira"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeProjectTypePropEnum = append(projectTypeProjectTypePropEnum, v)
	}
}

const (

	// ProjectProjectTypeTracker captures enum value "tracker"
	ProjectProjectTypeTracker string = "tracker"

	// ProjectProjectTypeJira captures enum value "jira"
	ProjectProjectTypeJira string = "jira"
)

// prop value enum
func (m *Project) validateProjectTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, projectTypeProjectTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateProjectType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProjectTypeEnum("projectType", "body", m.ProjectType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
