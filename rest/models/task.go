// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task task
// swagger:model Task
type Task struct {

	// created at
	// Read Only: true
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// current state map
	CurrentStateMap interface{} `json:"currentStateMap,omitempty"`

	// destination
	Destination string `json:"destination,omitempty"`

	// last synchronized version
	// Read Only: true
	LastSynchronizedVersion int64 `json:"lastSynchronizedVersion,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// story field map
	StoryFieldMap interface{} `json:"storyFieldMap,omitempty"`

	// story type map
	StoryTypeMap interface{} `json:"storyTypeMap,omitempty"`

	// task ID
	// Read Only: true
	TaskID strfmt.UUID4 `json:"taskID,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "datetime", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var taskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","stopped","failed","cancel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeStatusPropEnum = append(taskTypeStatusPropEnum, v)
	}
}

const (

	// TaskStatusPending captures enum value "pending"
	TaskStatusPending string = "pending"

	// TaskStatusRunning captures enum value "running"
	TaskStatusRunning string = "running"

	// TaskStatusStopped captures enum value "stopped"
	TaskStatusStopped string = "stopped"

	// TaskStatusFailed captures enum value "failed"
	TaskStatusFailed string = "failed"

	// TaskStatusCancel captures enum value "cancel"
	TaskStatusCancel string = "cancel"
)

// prop value enum
func (m *Task) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateTaskID(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskID) { // not required
		return nil
	}

	if err := validate.FormatOf("taskID", "body", "uuid4", m.TaskID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
