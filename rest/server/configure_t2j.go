// Code generated by go-swagger; DO NOT EDIT.

package server

import (
	"crypto/tls"
	"net/http"
	"strings"

	interpose "github.com/carbocation/interpose/middleware"
	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/king-jam/tracker2jira/backend"
	projectHandlers "github.com/king-jam/tracker2jira/handlers/projects"
	taskHandlers "github.com/king-jam/tracker2jira/handlers/tasks"
	userHandlers "github.com/king-jam/tracker2jira/handlers/users"
	"github.com/king-jam/tracker2jira/handlers/version"
	"github.com/king-jam/tracker2jira/rest/server/operations"
	"github.com/king-jam/tracker2jira/rest/server/operations/general"
	"github.com/king-jam/tracker2jira/rest/server/operations/projects"
	"github.com/king-jam/tracker2jira/rest/server/operations/tasks"
	"github.com/king-jam/tracker2jira/rest/server/operations/users"
	log "github.com/sirupsen/logrus"
	graceful "github.com/tylerb/graceful"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name t2j --spec ../swagger.yaml --server-package server --exclude-main

// ConfigureAPIWithDependencies adds a new method to server.go to configure the API and handlers while injecting
// our dependencies for the runtime environment.
func (s *Server) ConfigureAPIWithDependencies(db backend.Database) {
	if s.api != nil {
		s.handler = configureAPIWithDependencies(s.api, db)
	}
}

func configureFlags(api *operations.T2jAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

// this is left to ensure the existing functions in server.go aren't broken
// TODO: Make this cause some error on compile if it is ever used
func configureAPI(api *operations.T2jAPI) http.Handler {
	return nil
}

func configureAPIWithDependencies(api *operations.T2jAPI, db backend.Database) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	api.Logger = log.Infof

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.ProjectsDeleteProjectByIDHandler = projects.DeleteProjectByIDHandlerFunc(func(params projects.DeleteProjectByIDParams) middleware.Responder {
		return projectHandlers.DeleteProject(db, params)
	})
	api.TasksDeleteTaskByIDHandler = tasks.DeleteTaskByIDHandlerFunc(func(params tasks.DeleteTaskByIDParams) middleware.Responder {
		return taskHandlers.DeleteTask(db, params)
	})
	api.UsersDeleteUserByIDHandler = users.DeleteUserByIDHandlerFunc(func(params users.DeleteUserByIDParams) middleware.Responder {
		return userHandlers.DeleteUser(db, params)
	})
	api.ProjectsGetProjectByIDHandler = projects.GetProjectByIDHandlerFunc(func(params projects.GetProjectByIDParams) middleware.Responder {
		return projectHandlers.GetProject(db, params)
	})
	api.ProjectsGetProjectsHandler = projects.GetProjectsHandlerFunc(func(params projects.GetProjectsParams) middleware.Responder {
		return projectHandlers.GetProjects(db, params)
	})
	api.TasksGetTaskByIDHandler = tasks.GetTaskByIDHandlerFunc(func(params tasks.GetTaskByIDParams) middleware.Responder {
		return taskHandlers.GetTask(db, params)
	})
	api.TasksGetTasksHandler = tasks.GetTasksHandlerFunc(func(params tasks.GetTasksParams) middleware.Responder {
		return taskHandlers.GetTasks(db, params)
	})
	api.UsersGetUserByIDHandler = users.GetUserByIDHandlerFunc(func(params users.GetUserByIDParams) middleware.Responder {
		return userHandlers.GetUser(db, params)
	})
	api.UsersGetUsersHandler = users.GetUsersHandlerFunc(func(params users.GetUsersParams) middleware.Responder {
		return userHandlers.GetUsers(db, params)
	})
	api.ProjectsPostProjectHandler = projects.PostProjectHandlerFunc(func(params projects.PostProjectParams) middleware.Responder {
		return projectHandlers.PostProject(db, params)
	})
	api.TasksPostTaskHandler = tasks.PostTaskHandlerFunc(func(params tasks.PostTaskParams) middleware.Responder {
		return taskHandlers.PostTask(db, params)
	})
	api.UsersPostUserHandler = users.PostUserHandlerFunc(func(params users.PostUserParams) middleware.Responder {
		return userHandlers.PostUser(db, params)
	})
	api.GeneralVersionHandler = general.VersionHandlerFunc(func(params general.VersionParams) middleware.Responder {
		return version.GetVersion(params)
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	uiHandler := uiMiddleware(handler)
	logViaLogrus := interpose.NegroniLogrus()
	return logViaLogrus(uiHandler)
}

// uiMiddleware exposes the UI
func uiMiddleware(handler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Shortcut helpers for swagger-ui
		if r.URL.Path == "/" || r.URL.Path == "/ui" {
			http.Redirect(w, r, "/ui/", http.StatusFound)
			return
		}
		// Serving ./swagger-ui/
		if strings.Index(r.URL.Path, "/ui/") == 0 {
			http.StripPrefix("/ui/", http.FileServer(assetFS())).ServeHTTP(w, r)
			return
		}
		handler.ServeHTTP(w, r)
	})
}
